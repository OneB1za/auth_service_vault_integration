"""
gitDjango settings for auth_service project.

Generated by 'django-admin startproject' using Django 4.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import hvac
import os
import threading
import time
from pythonjsonlogger.jsonlogger import JsonFormatter
import pythonjsonlogger

from users.logging_formatters import CustomJsonFormatter

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-kjn42$$h=5clzub1&wp(i^ukdt0op2=%_ty+q#^1zg$1$pq2ms'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'users.apps.UsersConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'auth_service.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'auth_service.wsgi.application'

# логирование
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "main_formatter": {
            "format": "{levelname} - {asctime} - {module} - {filename} - {message}",
            "style": "{",
        },
        "json_formatter": {
            "()": CustomJsonFormatter,
        },
    },
    "filters": {},
    "handlers": {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'main_formatter'
        },
        'file': {
            'class': 'logging.FileHandler',
            'formatter': 'json_formatter',
            'filename': 'info.log',
        }
    },
    "loggers": {
        'main': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': True,
        }
    },
}


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases
# Для дэфолтной базы sqlite3
'''
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}
'''


class VaultDBCredentials:
    def __init__(self, vault_url, role_name, token):
        self.client = hvac.Client(url=vault_url, token=token)
        self.role_name = role_name
        self.credentials = None
        self.expiry_time = 0

    def update_credentials(self):
        # Запросить новые учетные данные
        creds = self.client.secrets.database.generate_credentials(name=self.role_name)
        self.credentials = {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': 'users',
            'USER': creds['data']['username'],
            'PASSWORD': creds['data']['password'],
            'HOST': 'postgres',  # Имя PostgreSQL из docker-compose
            'PORT': 5432,
        }
        # Сохранить время истечения
        self.expiry_time = time.time() + creds['lease_duration']
        print(f"Updated credentials: {self.credentials}")

    def start_rotation(self, interval=60):
        # Фоновый поток для проверки и обновления токенов
        def rotate():
            while True:
                if time.time() > self.expiry_time - 300:  # Обновить за 5 минут до истечения токена
                    self.update_credentials()
                time.sleep(interval)

        threading.Thread(target=rotate, daemon=True).start()


vault_credentials = VaultDBCredentials(
    vault_url="http://vault-server:8200",
    role_name="django-app",
    token="root"  # НЕБЕЗОПАСНЫЙ СПОСОБ ПОЛУЧЕНИЯ ТОКЕНА
)
vault_credentials.update_credentials()
vault_credentials.start_rotation()

DATABASES = {
    'default': vault_credentials.credentials
}

"""
# Для постгреса + vault
# Получение учетных данных из Vault без проверки на истечение токена и без celery

def get_vault_db_credentials():
    client = hvac.Client(url=os.getenv("VAULT_ADDR"), token=os.getenv("VAULT_TOKEN"))
    secret = client.read("database/creds/django-app")
    return {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": "users",
        "USER": secret["data"]["username"],
        "PASSWORD": secret["data"]["password"],
        "HOST": "postgres",  # Имя сервиса PostgreSQL
        "PORT": 5432,
    }

DATABASES = {
    "default": get_vault_db_credentials()
}
"""
# для постгреса без волта
"""
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'users', # users
        'USER': 'kirill', # kirill
        'PASSWORD': 'admin', # admin
        'HOST': '192.168.1.21',
        'PORT': 5432,
    }
}
"""

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# User

AUTH_USER_MODEL = 'users.CustomUser'